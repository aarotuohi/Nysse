Tietorakenteeksi valitsin stl map. Map rakenteessa on aina avain jolla päästään käsiksi sen arvoihin tässä tapauksessa struct Town. Huomasin, että monessa komennossa oli annettu parametriksi TownID, joten ajattelin tämän toimivan erinomaisesti avaimena. Kokeilin myös unordered_mapia mutta nopeasti tajusin, että kyseistä rakennetta olisi hyvin vaivalloista ja tehotonta käyttä useassa kohdassa. Mapin tehokkuudet vaihtelivat vähiten joten koin että se olisi myös tehokkain rakenne projektiin. Sort komennon käyttö olisi vienyt monilta fukntioilta tehoa O(nlogn) ylitse mikä ei ole hyvä.

Toisessa vaiheessa tietorakenteeksi valitsin vectorin, jonka sisällä on pair. pair koostuu kaupungin id:stä eli kahdesta string:sta. Rakenteen valitsin, koska ohjeissa ei tarvinnut asettaa teitä mitenkään järjestykseen. Muuten olisin valinnut map:in kuten ensimmäisessä palautuksessa. Vektori tuntui helpoimmalta iteroida, sillä pakolliset komennut vaativat pääosin vain tietojen hakemista satunnaisessa järjestyksessä. std::pair tuntui myös oikealta valinnalta sillä syötetiedostossa annettiin tie kahden kaupungin välille, joten pair oli mielestäni paras vaihtoehto. any_route funktioon tarvitsi kaksi tietorakennetta jotta syvyys ensin etsintä voitiin suorittaa. map jossa townid on avain ja vektorin sisällä on kaupungista lähtevät tiet vektorissa. Tietorakenteen valinta jotta townid:n kautta voidaan päästä silmukkaan helposti läpikäydestä. Tarkistetaan myös onko silmukassa käyty totuusarvon avulla.
